BILLING API - EXACT PAYLOAD STRUCTURES FOR IMPLEMENTATION
=========================================================

Copy these exact payload structures for your frontend implementation.
Replace placeholder values with actual data from your forms/state.

=========================================================
ENDPOINT 1: CREATE BILL - POST /api/v1/billing/{storeId}/bills
=========================================================

HEADERS (Copy Exact):
{
  "Authorization": "Bearer YOUR_JWT_TOKEN_HERE",
  "Content-Type": "application/json",
  "Idempotency-Key": "bill-1727344740000-abc123"
}

PAYLOAD OPTION 1 - With Existing Customer:
{
  "customer_id": "550e8400-e29b-41d4-a716-446655440000",
  "coupon_code": "SAVE20",
  "items": [
    {
      "line_no": 1,
      "type": "service",
      "id": "550e8400-e29b-41d4-a716-446655440001",
      "staff_id": "550e8400-e29b-41d4-a716-446655440002",
      "qty": 1,
      "discount_type": "percent",
      "discount_value": 10,
      "cgst": 9,
      "sgst": 9
    }
  ],
  "discount": 50.00,
  "payment_mode": "upi",
  "payment_amount": 850.00,
  "payments": [
    {
      "mode": "upi",
      "amount": 850.00,
      "reference": "UPI-TXN-123456789",
      "timestamp": "2025-09-26T14:30:00.000Z"
    }
  ],
  "billing_timestamp": "2025-09-26T14:29:00.000Z",
  "payment_timestamp": "2025-09-26T14:30:00.000Z"
}

PAYLOAD OPTION 2 - With New Customer:
{
  "customer": {
    "name": "Priya Sharma",
    "gender": "Female",
    "contact_no": "+919876543210",
    "address": "123 MG Road, Bangalore, Karnataka 560001",
    "email": "priya.sharma@gmail.com"
  },
  "coupon_codes": ["WELCOME10", "FIRSTTIME20"],
  "referral_code": "REF789456",
  "items": [
    {
      "line_no": 1,
      "type": "service",
      "id": "service-haircut-premium-uuid",
      "staff_id": "staff-sarah-uuid",
      "qty": 1,
      "discount_type": "flat",
      "discount_value": 100,
      "cgst": 9,
      "sgst": 9
    },
    {
      "line_no": 2,
      "type": "product",
      "id": "product-hair-serum-uuid",
      "staff_id": null,
      "qty": 2,
      "discount_type": "percent",
      "discount_value": 5,
      "cgst": 12,
      "sgst": 12
    }
  ],
  "discount": 75.50,
  "payment_mode": "split",
  "payment_amount": 1500.00,
  "payments": [
    {
      "mode": "card",
      "amount": 1000.00,
      "reference": "CARD-TXN-987654321",
      "timestamp": "2025-09-26T15:45:00.000Z"
    },
    {
      "mode": "cash",
      "amount": 500.00,
      "reference": null,
      "timestamp": "2025-09-26T15:46:00.000Z"
    }
  ],
  "billing_timestamp": "2025-09-26T15:44:00.000Z",
  "payment_timestamp": "2025-09-26T15:46:00.000Z"
}

PAYLOAD OPTION 3 - No Payment (Unpaid Bill):
{
  "customer_id": "existing-customer-uuid-here",
  "items": [
    {
      "line_no": 1,
      "type": "membership",
      "id": "membership-gold-uuid",
      "staff_id": "staff-manager-uuid",
      "qty": 1,
      "discount_type": "percent",
      "discount_value": 0,
      "cgst": 18,
      "sgst": 18
    }
  ],
  "discount": 0,
  "payment_mode": "none",
  "payment_amount": 0,
  "payments": [],
  "billing_timestamp": "2025-09-26T16:00:00.000Z"
}

EXPECTED RESPONSE STRUCTURE (201 Created):
{
  "success": true,
  "message": "Bill saved successfully",
  "data": {
    "bill_id": "550e8400-e29b-41d4-a716-446655440010",
    "invoice_number": "INV202500001234",
    "created_at": "2025-09-26T15:44:15.123Z",
    "updated_at": "2025-09-26T15:44:15.123Z",
    "customer": {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "name": "Priya Sharma",
      "phoneNumber": "+919876543210",
      "address": "123 MG Road, Bangalore, Karnataka 560001",
      "email": "priya.sharma@gmail.com",
      "gender": "Female"
    },
    "items": [
      {
        "line_no": 1,
        "type": "service",
        "id": "service-haircut-premium-uuid",
        "name": "Premium Haircut & Styling",
        "description": "Professional haircut with advanced styling",
        "staff_id": "staff-sarah-uuid",
        "staff_name": "Sarah Johnson",
        "qty": 1,
        "unit_price": 800.00,
        "discount_type": "flat",
        "discount_value": 100,
        "cgst_rate": 9,
        "sgst_rate": 9,
        "base_amount": 800.00,
        "discount_amount": 100.00,
        "taxable_amount": 700.00,
        "cgst_amount": 63.00,
        "sgst_amount": 63.00,
        "tax_amount": 126.00,
        "line_total": 826.00
      },
      {
        "line_no": 2,
        "type": "product",
        "id": "product-hair-serum-uuid",
        "name": "Hair Serum Premium 100ml",
        "description": "Professional grade hair serum",
        "staff_id": null,
        "staff_name": null,
        "qty": 2,
        "unit_price": 450.00,
        "discount_type": "percent",
        "discount_value": 5,
        "cgst_rate": 12,
        "sgst_rate": 12,
        "base_amount": 900.00,
        "discount_amount": 45.00,
        "taxable_amount": 855.00,
        "cgst_amount": 102.60,
        "sgst_amount": 102.60,
        "tax_amount": 205.20,
        "line_total": 1060.20
      }
    ],
    "totals": {
      "sub_total": 1886.20,
      "discount": 75.50,
      "tax_amount": 331.20,
      "cgst_amount": 165.60,
      "sgst_amount": 165.60,
      "grand_total": 1810.70,
      "paid": 1500.00,
      "dues": 310.70,
      "status": "partial"
    },
    "payments": [
      {
        "payment_id": "payment-uuid-1",
        "mode": "card",
        "amount": 1000.00,
        "reference": "CARD-TXN-987654321",
        "timestamp": "2025-09-26T15:45:00.000Z",
        "created_at": "2025-09-26T15:44:15.123Z"
      },
      {
        "payment_id": "payment-uuid-2",
        "mode": "cash",
        "amount": 500.00,
        "reference": null,
        "timestamp": "2025-09-26T15:46:00.000Z",
        "created_at": "2025-09-26T15:44:15.123Z"
      }
    ],
    "store_id": "your-store-uuid",
    "billing_timestamp": "2025-09-26T15:44:00.000Z",
    "payment_timestamp": "2025-09-26T15:46:00.000Z",
    "coupon_codes": ["WELCOME10", "FIRSTTIME20"],
    "referral_code": "REF789456"
  }
}

=========================================================
ENDPOINT 2: LIST BILLS - GET /api/v1/billing/{storeId}/bills
=========================================================

URL WITH QUERY PARAMETERS (Copy Exact):
/api/v1/billing/your-store-uuid/bills?page=1&limit=20&from=2025-09-01T00:00:00.000Z&to=2025-09-30T23:59:59.999Z&q=priya&sort=date_desc&status=partial

HEADERS (Copy Exact):
{
  "Authorization": "Bearer YOUR_JWT_TOKEN_HERE"
}

EXPECTED RESPONSE STRUCTURE (200 OK):
{
  "success": true,
  "data": {
    "items": [
      {
        "bill_id": "bill-uuid-1",
        "invoice_number": "INV202500001234",
        "created_at": "2025-09-26T15:44:15.123Z",
        "customer_name": "Priya Sharma",
        "customer_phone": "+919876543210",
        "customer_id": "customer-uuid-1",
        "item_count": 2,
        "sub_total": 1886.20,
        "discount": 75.50,
        "tax_amount": 331.20,
        "grand_total": 1810.70,
        "paid": 1500.00,
        "dues": 310.70,
        "status": "partial",
        "billing_timestamp": "2025-09-26T15:44:00.000Z",
        "payment_timestamp": "2025-09-26T15:46:00.000Z"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 1,
      "total_pages": 1,
      "has_previous": false,
      "has_next": false
    },
    "summary": {
      "total_bills": 1,
      "total_amount": 1810.70,
      "paid_amount": 1500.00,
      "due_amount": 310.70
    }
  }
}

=========================================================
ENDPOINT 3: HOLD BILL - POST /api/v1/billing/{storeId}/bills/hold
=========================================================

HEADERS (Copy Exact):
{
  "Authorization": "Bearer YOUR_JWT_TOKEN_HERE",
  "Content-Type": "application/json"
}

PAYLOAD (Copy Exact):
{
  "customer": {
    "name": "Anita Singh",
    "gender": "Female",
    "contact_no": "+919876543211",
    "address": "456 Park Street, Mumbai, Maharashtra 400001"
  },
  "coupon_code": "SAVE15",
  "items": [
    {
      "line_no": 1,
      "type": "service",
      "id": "service-facial-uuid",
      "staff_id": "staff-meera-uuid",
      "qty": 1,
      "discount_type": "percent",
      "discount_value": 0,
      "cgst": 9,
      "sgst": 9
    },
    {
      "line_no": 2,
      "type": "product",
      "id": "product-face-cream-uuid",
      "staff_id": null,
      "qty": 1,
      "discount_type": "flat",
      "discount_value": 25,
      "cgst": 12,
      "sgst": 12
    }
  ],
  "discount": 30.00,
  "payment_mode": "none",
  "payment_amount": 0,
  "payments": [],
  "billing_timestamp": "2025-09-26T16:30:00.000Z"
}

EXPECTED RESPONSE STRUCTURE (201 Created):
{
  "success": true,
  "message": "Bill held successfully",
  "data": {
    "held_id": "held-bill-uuid-123",
    "created_at": "2025-09-26T16:30:15.456Z",
    "customer_summary": "Anita Singh (+919876543211)",
    "item_count": 2,
    "amount_estimate": 1245.80
  }
}

=========================================================
ENDPOINT 4: LIST HELD BILLS - GET /api/v1/billing/{storeId}/bills/held
=========================================================

HEADERS (Copy Exact):
{
  "Authorization": "Bearer YOUR_JWT_TOKEN_HERE"
}

EXPECTED RESPONSE STRUCTURE (200 OK):
{
  "success": true,
  "data": {
    "held": [
      {
        "held_id": "held-bill-uuid-123",
        "created_at": "2025-09-26T16:30:15.456Z",
        "customer_summary": "Anita Singh (+919876543211)",
        "item_count": 2,
        "amount_estimate": 1245.80
      },
      {
        "held_id": "held-bill-uuid-124",
        "created_at": "2025-09-26T17:15:22.789Z",
        "customer_summary": "Rajesh Kumar (+919876543212)",
        "item_count": 1,
        "amount_estimate": 590.00
      }
    ]
  }
}

=========================================================
ENDPOINT 5: GET HELD BILL - GET /api/v1/billing/{storeId}/bills/held/{heldId}
=========================================================

URL (Copy Exact):
/api/v1/billing/your-store-uuid/bills/held/held-bill-uuid-123

HEADERS (Copy Exact):
{
  "Authorization": "Bearer YOUR_JWT_TOKEN_HERE"
}

EXPECTED RESPONSE STRUCTURE (200 OK):
{
  "success": true,
  "data": {
    "held": {
      "held_id": "held-bill-uuid-123",
      "created_at": "2025-09-26T16:30:15.456Z",
      "payload": {
        "customer": {
          "name": "Anita Singh",
          "gender": "Female",
          "contact_no": "+919876543211",
          "address": "456 Park Street, Mumbai, Maharashtra 400001"
        },
        "coupon_code": "SAVE15",
        "items": [
          {
            "line_no": 1,
            "type": "service",
            "id": "service-facial-uuid",
            "staff_id": "staff-meera-uuid",
            "qty": 1,
            "discount_type": "percent",
            "discount_value": 0,
            "cgst": 9,
            "sgst": 9
          },
          {
            "line_no": 2,
            "type": "product",
            "id": "product-face-cream-uuid",
            "staff_id": null,
            "qty": 1,
            "discount_type": "flat",
            "discount_value": 25,
            "cgst": 12,
            "sgst": 12
          }
        ],
        "discount": 30.00,
        "payment_mode": "none",
        "payment_amount": 0,
        "payments": [],
        "billing_timestamp": "2025-09-26T16:30:00.000Z"
      },
      "suggested_number": "INV202500001235"
    }
  }
}

=========================================================
JAVASCRIPT IMPLEMENTATION WITH EXACT PAYLOADS
=========================================================

// Create Bill Function (Copy Exact)
const createBill = async (storeId, billData) => {
  const response = await fetch(`/api/v1/billing/${storeId}/bills`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('jwt_token')}`,
      'Content-Type': 'application/json',
      'Idempotency-Key': `bill-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    },
    body: JSON.stringify(billData)
  });
  
  const result = await response.json();
  
  if (!response.ok) {
    throw new Error(result.message || 'Failed to create bill');
  }
  
  return result.data;
};

// Example Usage - Single Payment (Copy Exact)
const singlePaymentBill = {
  "customer": {
    "name": "Amit Patel",
    "gender": "Male",
    "contact_no": "+919876543213",
    "address": "789 Residency Road, Pune, Maharashtra 411001",
    "email": "amit.patel@example.com"
  },
  "items": [
    {
      "line_no": 1,
      "type": "service",
      "id": "service-massage-uuid",
      "staff_id": "staff-therapist-uuid",
      "qty": 1,
      "discount_type": "percent",
      "discount_value": 5,
      "cgst": 9,
      "sgst": 9
    }
  ],
  "discount": 0,
  "payment_mode": "card",
  "payment_amount": 1200.00,
  "payments": [
    {
      "mode": "card",
      "amount": 1200.00,
      "reference": "CARD-987654321",
      "timestamp": new Date().toISOString()
    }
  ],
  "billing_timestamp": new Date().toISOString(),
  "payment_timestamp": new Date().toISOString()
};

// Example Usage - Split Payment (Copy Exact)
const splitPaymentBill = {
  "customer_id": "existing-customer-uuid",
  "items": [
    {
      "line_no": 1,
      "type": "service",
      "id": "service-haircut-uuid",
      "staff_id": "staff-stylist-uuid",
      "qty": 1,
      "discount_type": "flat",
      "discount_value": 50,
      "cgst": 9,
      "sgst": 9
    },
    {
      "line_no": 2,
      "type": "product",
      "id": "product-shampoo-uuid",
      "staff_id": null,
      "qty": 1,
      "discount_type": "percent",
      "discount_value": 10,
      "cgst": 12,
      "sgst": 12
    }
  ],
  "discount": 25.00,
  "payment_mode": "split",
  "payment_amount": 950.00,
  "payments": [
    {
      "mode": "upi",
      "amount": 500.00,
      "reference": "UPI-REF-123456",
      "timestamp": "2025-09-26T18:00:00.000Z"
    },
    {
      "mode": "cash",
      "amount": 450.00,
      "reference": null,
      "timestamp": "2025-09-26T18:01:00.000Z"
    }
  ],
  "billing_timestamp": "2025-09-26T17:59:00.000Z",
  "payment_timestamp": "2025-09-26T18:01:00.000Z"
};

// Hold Bill Function (Copy Exact)
const holdBill = async (storeId, billData) => {
  const response = await fetch(`/api/v1/billing/${storeId}/bills/hold`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('jwt_token')}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(billData)
  });
  
  const result = await response.json();
  
  if (!response.ok) {
    throw new Error(result.message || 'Failed to hold bill');
  }
  
  return result.data;
};

// List Bills Function (Copy Exact)
const listBills = async (storeId, filters = {}) => {
  const params = new URLSearchParams();
  
  if (filters.page) params.append('page', filters.page);
  if (filters.limit) params.append('limit', filters.limit);
  if (filters.from) params.append('from', filters.from);
  if (filters.to) params.append('to', filters.to);
  if (filters.search) params.append('q', filters.search);
  if (filters.sort) params.append('sort', filters.sort);
  if (filters.status) params.append('status', filters.status);
  
  const response = await fetch(`/api/v1/billing/${storeId}/bills?${params}`, {
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('jwt_token')}`
    }
  });
  
  const result = await response.json();
  
  if (!response.ok) {
    throw new Error(result.message || 'Failed to fetch bills');
  }
  
  return result.data;
};

// Complete Implementation Example (Copy Exact)
const processBillTransaction = async () => {
  try {
    // Step 1: Create the bill
    const bill = await createBill('your-store-uuid', singlePaymentBill);
    console.log('Bill created:', bill.invoice_number);
    
    // Step 2: Display success message
    alert(`Bill created successfully! Invoice: ${bill.invoice_number}`);
    
    // Step 3: Print or display invoice
    displayInvoice(bill);
    
  } catch (error) {
    console.error('Error creating bill:', error);
    alert(`Error: ${error.message}`);
  }
};

// Error Handling Example (Copy Exact)
const handleBillCreationError = (error, response) => {
  if (response.status === 400) {
    // Validation errors
    console.error('Validation failed:', error.errors);
    error.errors?.forEach(err => {
      console.error(`${err.field}: ${err.message}`);
    });
  } else if (response.status === 403) {
    // Access denied
    console.error('Store access denied');
    // Redirect to login or show error
  } else if (response.status === 409) {
    // Duplicate idempotency key
    console.error('Duplicate bill detected');
    // Generate new idempotency key and retry
  } else {
    // Generic error
    console.error('Unexpected error:', error.message);
  }
};

=========================================================
VALIDATION REQUIREMENTS (Copy for Reference)
=========================================================

REQUIRED FIELDS CHECK:
✓ customer_id OR customer (not both)
✓ customer.name (if using customer object)
✓ customer.contact_no (if using customer object) - E.164 format
✓ items array (minimum 1 item)
✓ items[].line_no (unique integers)
✓ items[].type (service|product|membership)
✓ items[].id (valid catalog UUID)
✓ items[].qty (positive integer)
✓ items[].cgst (tax rate percentage)
✓ items[].sgst (tax rate percentage)
✓ payment_mode (cash|card|upi|wallet|split|none)
✓ billing_timestamp (ISO 8601 format)

PAYMENT MODE VALIDATION:
- "none": payment_amount = 0, payments = []
- "cash"|"card"|"upi"|"wallet": Single payment in payments array
- "split": Multiple payments, sum equals payment_amount

PHONE NUMBER FORMAT:
✓ Must start with + (plus sign)
✓ Must include country code (e.g., +91 for India)
✓ Full format: +919876543210 (no spaces or dashes)

TIMESTAMP FORMAT:
✓ ISO 8601 format: "2025-09-26T18:30:00.000Z"
✓ Use new Date().toISOString() in JavaScript

UUID FORMAT:
✓ Standard UUID v4 format: "550e8400-e29b-41d4-a716-446655440000"

=========================================================
COPY-PASTE CHECKLIST
=========================================================

Before implementing:
□ Replace "YOUR_JWT_TOKEN_HERE" with actual JWT token
□ Replace "your-store-uuid" with actual store UUID
□ Replace all placeholder UUIDs with actual catalog/staff IDs
□ Update phone numbers to actual customer numbers
□ Set correct timestamps using new Date().toISOString()
□ Validate all required fields are present
□ Test with small amounts first
□ Handle all error scenarios
□ Implement proper loading states
□ Add success confirmation messages

=========================================================